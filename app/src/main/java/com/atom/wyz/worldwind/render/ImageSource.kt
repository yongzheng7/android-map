package com.atom.wyz.worldwind.render

import android.graphics.Bitmap
import androidx.annotation.DrawableRes
import androidx.annotation.IntDef
import com.atom.wyz.worldwind.util.Logger
import com.atom.wyz.worldwind.util.WWUtil

class ImageSource {

    @IntDef(TYPE_BITMAP, TYPE_RESOURCE, TYPE_FILE_PATH , TYPE_URL , TYPE_UNKNOWN)
    @kotlin.annotation.Retention(AnnotationRetention.SOURCE)
    public annotation class ImageType

    companion object{
        protected const val TYPE_BITMAP = 1

        protected const val TYPE_RESOURCE = 2

        protected const val TYPE_FILE_PATH = 3

        protected const val TYPE_URL = 4

        protected const val TYPE_UNKNOWN = 5

        protected var bitmapKeyPool: Long = 0

        fun fromBitmap(bitmap: Bitmap?): ImageSource {
            if (bitmap == null || bitmap.isRecycled) {
                throw IllegalArgumentException(
                        Logger.logMessage(Logger.ERROR, "ImageSource", "fromBitmap", "invalidBitmap"))
            }
            val imageSource: ImageSource = ImageSource()
            imageSource.source = bitmap
            imageSource.key = nextBitmapKey()
            imageSource.type = TYPE_BITMAP
            return imageSource
        }

        fun fromResource(@DrawableRes id: Int): ImageSource {
            val imageSource: ImageSource = ImageSource()
            imageSource.source = id
            imageSource.key = id
            imageSource.type = TYPE_RESOURCE
            return imageSource
        }

        fun fromFilePath(pathName: String?): ImageSource {
            if (pathName == null) {
                throw java.lang.IllegalArgumentException(
                        Logger.logMessage(Logger.ERROR, "ImageSource", "fromFilePath", "missingPathName"))
            }
            val imageSource: ImageSource = ImageSource()
            imageSource.source = pathName
            imageSource.key = pathName
            imageSource.type = TYPE_FILE_PATH
            return imageSource
        }

        fun fromUrl(urlString: String?): ImageSource {
            if (urlString == null) {
                throw java.lang.IllegalArgumentException(
                        Logger.logMessage(Logger.ERROR, "ImageSource", "fromUrl", "missingUrl"))
            }
            val imageSource: ImageSource = ImageSource()
            imageSource.source = urlString
            imageSource.key = urlString
            imageSource.type = TYPE_URL
            return imageSource
        }

        fun fromObject(source: Any?): ImageSource {
            if (source == null) {
                throw java.lang.IllegalArgumentException(
                        Logger.logMessage(Logger.ERROR, "ImageSource", "fromObject", "missingSource"))
            }
            return if (source is Bitmap) {
                fromBitmap(source)
            } else if (source is Int) { // Android resource identifier, as generated by the aapt tool
                fromResource(source)
            } else if (source is String && WWUtil.isUrlString(source)) {
                fromUrl(source)
            } else if (source is String) {
                fromFilePath(source as String?)
            } else {
                val imageSource: ImageSource = ImageSource()
                imageSource.source = source
                imageSource.key = source
                imageSource.type = TYPE_UNKNOWN
                imageSource
            }
        }

        fun nextBitmapKey(): String? {
            return "ImageSource " + ++bitmapKeyPool
        }
    }

    protected var source: Any? = null

    protected var key: Any? = null
    @ImageType
    protected var type = 0

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }
        if (other == null || this.javaClass != other.javaClass) {
            return false
        }
        val that: ImageSource = other as ImageSource
        return key == that.key && type == that.type
    }

    override fun hashCode(): Int {
        return 31 * key.hashCode() + type
    }

    override fun toString(): String{
        return if (type == TYPE_RESOURCE) {
            "Resource " + source.toString()
        } else {
            source.toString()
        }
    }

    fun isBitmap(): Boolean {
        return type == TYPE_BITMAP
    }

    fun isResource(): Boolean {
        return type == TYPE_RESOURCE
    }

    fun isFilePath(): Boolean {
        return type == TYPE_FILE_PATH
    }

    fun isUrl(): Boolean {
        return type == TYPE_URL
    }

    fun asBitmap(): Bitmap? {
        return if (type == TYPE_BITMAP) source as Bitmap? else null
    }

    @DrawableRes
    fun asResource(): Int {
        return if (type == TYPE_RESOURCE) source as Int else 0
    }

    fun asFilePath(): String? {
        return if (type == TYPE_FILE_PATH) source as String else null
    }

    fun asUrl(): String? {
        return if (type == TYPE_URL) source as String else null
    }

    fun asObject(): Any? {
        return source
    }
}